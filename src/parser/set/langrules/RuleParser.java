/* Generated By:JavaCC: Do not edit this line. RuleParser.java */
package parser.set.langrules;

import parser.set.langrules.tree.OperationNode;
import parser.set.langrules.tree.RuleTree;
import parser.set.langrules.tree.RulesSet;
import parser.set.langrules.tree.RulesException;
import parser.set.langrules.tree.RuleNode;
import parser.set.langrules.tree.ParameterNode;
import informations.Infos;
import java.io.*;
import parser.set.declare.LanguageInformations;
import java.util.ArrayList;
import java.util.Arrays;


public class RuleParser implements RuleParserConstants {
    static ArrayList<String> alp;
    static ArrayList<String> undef = new ArrayList<String>();
    static int p;

    public static RulesSet parse(LanguageInformations infos, String filename )
        throws ParseException, NumberFormatException, ParseException, RulesException, IOException
    {
        alp = infos.getAlphabet();
        undef.addAll(Arrays.asList(Infos.UNDEFINED_CHARACTERS));
        p = infos.getParameters();

        RulesSet set = null;
        reader = new FileReader(filename);
        RuleParser parser = new RuleParser( reader );
        set = parser.Start();
        reader.close();
        return set;
    }
    public static FileReader reader;

  final public RulesSet Start() throws ParseException, NumberFormatException, ParseException, RulesException {
    RulesSet set;
    RuleTree tree;
    RuleNode n;
    Token t;
    int m;
            set = new RulesSet(p);
            //System.out.println(p + " max parameters for this rule set");

    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PAR:
      case OPEN:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      n = Formula();
      jj_consume_token(ARROW);
      jj_consume_token(PAR);
      t = jj_consume_token(NUMBER);
      jj_consume_token(EOL);
                m = Integer.parseInt(t.image);
                // starts from 0
                if(m < p)
                {
                    tree = new RuleTree(p,n);
                    tree.setAssociatedParameter(m);
                    set.add(tree);
                    //System.out.println("Added rule for parameter " + m);
                }
                else
                {
                    {if (true) throw new ParseException("it can not be defined character '"+m+"' because max is '"+(p-1)+"'");}
                }
    }
    jj_consume_token(0);
          {if (true) return set;}
    throw new Error("Missing return statement in function");
  }

  final public RuleNode Formula() throws ParseException, NumberFormatException, ParseException {
    RuleNode n1,n2,n;
    OperationNode par;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPEN:
      jj_consume_token(OPEN);
      n1 = Formula();
      jj_consume_token(CLOSE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
        n2 = Formula();
                n = new OperationNode();
                par = (OperationNode) n;
                par.setAsAndNode();
                par.setLeftChild(n1);
                par.setRightChild(n2);
        break;
      case OR:
        jj_consume_token(OR);
        n2 = Formula();
                n = new OperationNode();
                par = (OperationNode) n;
                par.setAsOrNode();
                par.setLeftChild(n1);
                par.setRightChild(n2);
        break;
      default:
        jj_la1[1] = jj_gen;
                {if (true) return n1;}
      }
      break;
    case PAR:
      n1 = Param();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
        n2 = Formula();
                n = new OperationNode();
                par = (OperationNode) n;
                par.setAsAndNode();
                par.setLeftChild(n1);
                par.setRightChild(n2);
        break;
      case OR:
        jj_consume_token(OR);
        n2 = Formula();
                n = new OperationNode();
                par = (OperationNode) n;
                par.setAsOrNode();
                par.setLeftChild(n1);
                par.setRightChild(n2);
        break;
      default:
        jj_la1[2] = jj_gen;
                n = n1;
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public RuleNode Param() throws ParseException, NumberFormatException, ParseException {
    RuleNode n;
    Token t1,t2;
    int k;
    String c;
    jj_consume_token(PAR);
    t1 = jj_consume_token(NUMBER);
    jj_consume_token(POINT);
    t2 = jj_consume_token(VALUE);
        if(!alp.contains(t2.image) && !undef.contains(t2.image))
            {if (true) throw new ParseException("alphabet doesn't contain '"+t2.image+"' character");}

        k = Integer.parseInt(t1.image);
        c = t2.image;

        n = (RuleNode) new ParameterNode(k,c);
        {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public RuleParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x900,0x600,0x600,0x900,};
   }

  /** Constructor with InputStream. */
  public RuleParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RuleParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RuleParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public RuleParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RuleParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public RuleParser(RuleParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RuleParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[19];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 4; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 19; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
