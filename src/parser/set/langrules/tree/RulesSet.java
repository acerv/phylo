package parser.set.langrules.tree;

import informations.Infos;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import matrix.reader.CharMatrixReader;

public class RulesSet
{    
    // Set of rule trees
    private ArrayList<RuleTree> trees = new ArrayList<RuleTree>();
    private int numberOfParameters;

    /**
     * Sets the number of parameters
     * @param k
     */
    public RulesSet(int k)
    {
        numberOfParameters = k;
    }

    /**
     * Add a rule to set of rules
     * @param t
     * @throws RulesException
     */
    public void add(RuleTree t) throws RulesException
    {
        if(trees.size() < numberOfParameters)
            trees.add(t);
        else
            throw new RulesException("it's not possible to add more than "+numberOfParameters+" rules trees.");
    }

    /**
     * Returns rules for parameter k
     * @param k Index of parameter
     * @return null if rule doesn't exist for specified parameter
     */
    public RuleTree get(int k)
    {
        for(int i = 0; i < size(); i++)
            if(trees.get(i).getAssociatedParameter() == k)
                return trees.get(i);

        return null;
    }

    /**
     * Returns true if k parameter is contained into this set
     * @param k Index of parameter
     * @return
     */
    public boolean contains(int k)
    {
        for(int i = 0; i < size(); i++)
            if(trees.get(i).getAssociatedParameter() == k)
                return true;

        return false;
    }

    /**
     * Size of set
     * @return
     */
    public int size()
    {
        return trees.size();
    }
    
    /**
     * Check the consistency of character matrix with this set of rules
     */
    public void checkConsistencyOfMatrix(CharMatrixReader matrix)
            throws RulesException, Exception
    {
        /* Errors */
        String HAS_UNDEF_CHAR = "independent char is 0";
        String HAS_DEF_CHAR = "indep. has too much assignment";
        String SHOULD_BE_DEF = "doesn't satisfy rules";

        ArrayList<Integer> wrong_language = new ArrayList<Integer>();
        ArrayList<Integer> wrong_parameter = new ArrayList<Integer>();
        ArrayList<String> problem = new ArrayList<String>();

        ArrayList<Integer> independent_param = new ArrayList<Integer>();
        
        ArrayList<ArrayList<String>> M = matrix.getMatrix();
        
        // Get parameters which has rules. The others are all independent
        ArrayList<Integer> def_rules = new ArrayList<Integer> ();
        for(int i = 0; i < trees.size(); i++)
            def_rules.add(trees.get(i).getAssociatedParameter());
        
        // indipendent parameters
        for(int j = 0; j < trees.size(); j++)
            if(!this.contains(j))
                independent_param.add(j);

        // Get independent pramaters
        for(int i = 0; i < M.size(); i++) {
            for(int j = 0; j < independent_param.size(); j++) {
                if(M.get(i).get(j).equals(Infos.UNDEFINED_CHAR)) {
                    wrong_language.add(i);
                    wrong_parameter.add(j);

                    problem.add(HAS_UNDEF_CHAR);
                }
            }
        }

        // Print table of errors
        if(!wrong_language.isEmpty())
        {
            String err = "\n"
                             + "Following table shows problems on rules definition:\n\n"
                             + "-------------------------------------------------------------\n"
                             + " Language\t| Parameter\t| Problem\n"
                             + "-------------------------------------------------------------\n";
                    
            for(int i = 0; i < wrong_language.size(); i++)
            {
                int lang = wrong_language.get(i);
                int param = wrong_parameter.get(i);
                String prob = problem.get(i);

                err += matrix.getLanguages().get(lang)+"\t\t| "+param+"\t\t| "+prob+"\n";
            }

            throw new Exception("Rules set: error on rules definition.\n\n"+err+"\n");
        }
    }

    /**
     * Print set into its own formatted language
     */
    public void print()
    {
        System.out.println("\n// Generated by "+this.getClass().getSimpleName()+".java\n");

        for(int i = 0; i < trees.size(); i++)
            trees.get(i).print();
    }

    /**
     * Print set of rules into the specified file
     * @param file File to write
     * @throws IOException
     */
    public void printOnFile(File file)
            throws IOException
    {
        // Open file and buffer
        PrintStream defaultOut = new PrintStream(System.out);
        FileOutputStream out = new FileOutputStream(file);

        // Redirect bytes from println to System.out
        PrintStream print = new PrintStream(out);
        System.setOut(print);

        // Print set
        print();

        // Close file and buffer
        print.flush();
        print.close();
        out.close();

        // Restore original buffer
        System.setOut(defaultOut);
    }
}
