package parser.set.langcosts.table;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;

/**
 * Set of costs associated to parameters of a language
 * @author Cervesato Andrea - sawk.ita @ gmail.com
 */
public class ParametersSet
{
    private ArrayList<Parameter> set = new ArrayList<Parameter>();
    private int parameters;
    private CostsTable defaultTable;

    /**
     * Initialize the number of parameters in this set
     * @param param Number of parameters
     * @param alphabet Alphabet of the parameters
     * @param defaultTable Global default table used when a parameter is
     * not defined by its own costs rules
     */
    public ParametersSet(int param, CostsTable defaultTable)
            throws CostsException
    {
        if(defaultTable != null)
            this.defaultTable = defaultTable;
        else
            throw new CostsException(this.getClass().getName()+" is initialized with null default table");
        parameters = param;
    }

    /**
     * Returns the global default table
     * @return
     */
    public CostsTable getGlobalDefaultTable()
    {
        return defaultTable;
    }

    /**
     * Returns number of parameters in this set
     * @return
     */
    public int size()
    {
        return set.size();
    }

    /**
     * Adds a parameter into the set
     * @param p
     * @throws CostsException
     */
    public void add(Parameter p)
            throws CostsException
    {
        if(set.size() < parameters)
        {
            set.add(p);
        }
        else
            throw new CostsException("it's not possible to add more than "+parameters+" parameters.");
    }

    /**
     * Returns parameter in i position
     * @param k Position of parameter
     * @return null if parameter doesn't exist in this set
     */
    public Parameter get(int k)
    {
        for(int i = 0; i < size(); i++)
            if(set.get(i).getPosition() == k)
                return set.get(i);

        return null;
    }

    /**
     * Returns true if k parameter is contained into this set
     * @param k Position of parameter
     * @return
     */
    public boolean contains(int k)
    {
        for(int i = 0; i < size(); i++)
            if(set.get(i).getPosition() == k)
                return true;

        return false;
    }

    /**
     * Print parameters set in its own formatted language
     */
    public void print()
    {
        System.out.println("\n// Generated by "+this.getClass().getSimpleName()+".java\n");
        System.out.print("DEFAULT => ");
        defaultTable.print();
        System.out.println(";\n");
        for(int i = 0; i < size(); i++)
        {
            set.get(i).print();
        }
    }

    /**
     * Print set of parameters into the specified file
     * @param file File to write
     * @throws IOException
     */
    public void printOnFile(File file)
            throws IOException
    {
        // Open file and buffer
        PrintStream defaultOut = new PrintStream(System.out);
        FileOutputStream out = new FileOutputStream(file);

        // Redirect bytes from println to System.out
        PrintStream print = new PrintStream(out);
        System.setOut(print);

        // Print set
        print();

        // Close file and buffer
        print.flush();
        print.close();
        out.close();

        // Restore original buffer
        System.setOut(defaultOut);
    }
}
