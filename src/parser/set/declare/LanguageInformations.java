package parser.set.declare;

import informations.Infos;
import parser.set.langcosts.ParseException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Arrays;

/**
 * Set of informations about one language
 * @author Cervesato Andrea - sawk.ita @ gmail.com
 */
public class LanguageInformations
{
    private static String PARAMETERS = "PARAMETERS";
    private static String ALPHABET = "ALPHABET";
    private static String ASSIGNMENT = "=";
    private static String SEPARATOR = ",";
    private static String EOL = ";";
    private static String NEWLINE = "[\\s]*";
    private static String[] SPACES = {"\\s+", "(?m)^ +"};

    private ArrayList<String> alphabet = new ArrayList<String>();
    private int param;

    /**
     * Initialize class
     * @param filename
     * @throws IOException
     * @throws ParseException
     */
    public LanguageInformations(String filename) throws IOException, ParseException
    {
        FileReader reader = new FileReader(filename);
        BufferedReader read = new BufferedReader(reader);
        String line;
        while((line = read.readLine()) != null)
        {
            // Remove new line
            if (line.matches(NEWLINE))
                continue;

            // Get parameters
            if(line.toUpperCase().contains(PARAMETERS))
            {
                line = line.replaceAll(SPACES[0], "");
                line = line.replaceAll(SPACES[1], "");

                String split[] = line.split(ASSIGNMENT);
                split[1] = split[1].replaceAll(EOL, "");

                param = Integer.valueOf(split[1]);

                continue;
            }

            // Get alphabet
            if(line.toUpperCase().contains(ALPHABET))
            {
                line = line.replaceAll(SPACES[0], "");
                line = line.replaceAll(SPACES[1], "");

                String split[] = line.split(ASSIGNMENT);
                split[1] = split[1].replaceAll(EOL, "");
                String letters[] = split[1].split(SEPARATOR);

                if(letters[0].equals(""))
                    throw new ParseException("alphabet cannot be empty");

                alphabet.addAll(Arrays.asList(letters));
                
                removeRepetition(alphabet);
                removeUndefined(alphabet);

                continue;
            }
        }

        read.close();
        reader.close();
    }

    public LanguageInformations(ArrayList<String> alphabet, int languageLenght)
    {
        this.param = languageLenght;
        this.alphabet = alphabet;
    }

    private static void removeRepetition(ArrayList<String> a)
    {
        for(int i = 0; i < a.size(); i++)
            for(int j = 0; j < a.size(); j++)
                if(i == j)
                    continue;
                // remove repetition
                else if(a.get(i).equals(a.get(j)))
                    a.remove(i);
    }

    private static void removeUndefined(ArrayList<String> a)
    {
        for(int i = 0; i < Infos.UNDEFINED_CHARACTERS.length; i++)
            if(a.contains(Infos.UNDEFINED_CHARACTERS[i]))
                a.remove(a.indexOf(Infos.UNDEFINED_CHARACTERS[i]));
    }

    /**
     * @return number of parameters for the associated language
     */
    public int getParameters()
    {
        return param;
    }

    /**
     * @return alphabet for the associated language
     */
    public ArrayList<String> getAlphabet()
    {
        return alphabet;
    }

    public void print()
    {
        // Parameters
        System.out.println("// Generated by "+this.getClass().getSimpleName()+".java\n");
        System.out.println(PARAMETERS+" = "+param+";");

        // Alphabet
        System.out.print(ALPHABET+" = ");
        for(int i = 0; i < alphabet.size()-1; i++)
                System.out.print(alphabet.get(i)+", ");
        System.out.println(alphabet.get(alphabet.size()-1)+";");
    }

    /**
     * Print set of parameters into the specified file
     * @param file File to write
     * @throws IOException
     */
    public void printOnFile(File file)
            throws IOException
    {
        // Open file and buffer
        PrintStream defaultOut = new PrintStream(System.out);
        FileOutputStream out = new FileOutputStream(file);

        // Redirect bytes from println to System.out
        PrintStream print = new PrintStream(out);
        System.setOut(print);

        // Print set
        print();

        // Close file and buffer
        print.flush();
        print.close();
        out.close();

        // Restore original buffer
        System.setOut(defaultOut);
    }
}
