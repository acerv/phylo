package ui;

import algorithm.GenericAlgorithm;
import experiment.Experiment;
import experiment.GenericExperiment;
import files.utility.DeletePath;
import files.utility.FileCopy;
import informations.Infos;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import ui.configuration.PhyloConfig;

/**
 * New generic experiment wizard
 * @author Cervesato Andrea - sawk.ita @ gmail.com
 */
public class NewGenericExperimentDialog extends javax.swing.JDialog
{
    /** A return status code - returned if Cancel button has been pressed */
    public static final int RET_CANCEL = 0;
    /** A return status code - returned if OK button has been pressed */
    public static final int RET_OK = 1;

    private PhyloConfig CONFIG;
    private File INPUT_FILE;
    private String NAME;
    private GenericExperiment EXPERIMENT;
    private String[] ALGORITHMS;
    private boolean CORRECT_INPUT = false;

    // First selected algorithm
    private GenericAlgorithm ALGORITHM = Infos.getGenericAlgorithm(Infos.STANDARD_ALGORITHMS.length);

    // Error messages
    private String stdMsg = "Load input file first";
    private String errMsg = "Input file is not correct";
    private String okMsg  = "Input file is loaded";

    /** Creates new form NewGenericExperimentDialog */
    public NewGenericExperimentDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        ALGORITHMS = Infos.getGenericAlgorithms();
        initComponents();
        
        ErrorInputFileLabel.setForeground(Color.red);
        ErrorInputFileLabel.setText(errMsg);
        ErrorInputFileLabel.setVisible(true);
    }
    
    /**
     * Ritorna l'esperimento da eseguire
     * @return Esperimento da eseguire
     */
    public Experiment getExperiment()
    {
        return this.EXPERIMENT;
    }
    
    /**
     * Salva la configurazione
     * @param cfg Configurazione di phylo
     */
    public void setPhyloConfig(PhyloConfig cfg)
    {
        this.CONFIG = cfg;
    }

    /**
     * Ritorna il numero di repliche da fare dell'esperimento
     * @return Numero di repliche
     */
    public int getNumberOfReplication()
    {
        if(DuplicateExperimentCheckBox.isSelected())
        {
            return ((SpinnerNumberModel)this.DuplicateSpinner.getModel()).getNumber().intValue();
        }
        else
        {
            return 0; // Serve per la funzione replicateExperiment() in PhyloExperimentPanel.java
        }
    }
    /**
     * Carica nell'interfaccia le proprietà di un esperimento
     * @param exp Esperimento da cui prelevare le proprietà
     */
    public void loadExperimentProperties(Experiment exp)
            throws IOException
    {
        ExperimentNameFormattedTextField.setText(exp.getName());

        // Copy input file into temporary path
        FileCopy fc = new FileCopy();
        File input = fc.fileIntoDirectory(exp.getInput(), new File(Infos.TEMPORARY_PATH));
        InputFileTextField.setText(input.getAbsolutePath());

        // Input file is ok
        INPUT_FILE = input;
        ErrorInputFileLabel.setForeground(Color.green);
        ErrorInputFileLabel.setText(okMsg);
        ErrorInputFileLabel.setVisible(true);

        // Algorithm combobox
        int selectAlgorithm = exp.getAlgorithm().getValue()-Infos.STANDARD_ALGORITHMS.length;
        AlgorithmCombobox.setSelectedIndex(selectAlgorithm);

        // Delete old path of experiment
        DeletePath.doDelete(exp.getExperimentPath());

        // Ok button enabled
        OKButton.setEnabled(true);
        CORRECT_INPUT = true;
    }

    private GenericAlgorithm getSelectedAlgorithm()
    {
        int selected = Infos.STANDARD_ALGORITHMS.length + AlgorithmCombobox.getSelectedIndex();
        return Infos.getGenericAlgorithm(selected);
    }

    private void viewErrorDialog(String error)
    {
        JOptionPane.showMessageDialog(
                this,
                "Input string is not valid: "+error,
                "Error",
                JOptionPane.ERROR_MESSAGE);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        NewExperimentPanel = new javax.swing.JPanel();
        ExperimentNameLabel = new javax.swing.JLabel();
        ExperimentNameFormattedTextField = new javax.swing.JFormattedTextField();
        MaxInputChatLabel = new javax.swing.JLabel();
        UploadInputFileButton = new javax.swing.JButton();
        ErrorInputFileLabel = new javax.swing.JLabel();
        RequiredMatrixLabel = new javax.swing.JLabel();
        SpinnerNumberModel numberModel = new SpinnerNumberModel(1,1,50,1);
        DuplicateSpinner = new javax.swing.JSpinner(numberModel);
        DuplicateExperimentCheckBox = new javax.swing.JCheckBox();
        TimesLabel = new javax.swing.JLabel();
        AlgorithmLabel = new javax.swing.JLabel();
        AlgorithmCombobox = new javax.swing.JComboBox();
        InputFileTextField = new javax.swing.JTextField();
        OKButton = new javax.swing.JButton();
        CancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        NewExperimentPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("New Experiment"));
        NewExperimentPanel.setMaximumSize(new java.awt.Dimension(502, 435));
        NewExperimentPanel.setPreferredSize(new java.awt.Dimension(502, 435));

        ExperimentNameLabel.setText("( * )Experiment Name:");

        ExperimentNameFormattedTextField.setText("experiment");
        ExperimentNameFormattedTextField.setMaximumSize(new java.awt.Dimension(4, 19));
        ExperimentNameFormattedTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ExperimentNameFormattedTextFieldFocusLost(evt);
            }
        });

        MaxInputChatLabel.setText("(32 char max)");

        UploadInputFileButton.setText("Upload");
        UploadInputFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UploadInputFileButtonActionPerformed(evt);
            }
        });

        ErrorInputFileLabel.setForeground(new java.awt.Color(255, 0, 0));
        ErrorInputFileLabel.setAutoscrolls(true);

        RequiredMatrixLabel.setText("( * ) required");

        DuplicateSpinner.setToolTipText("Number of times that experiment will be duplicated");

        DuplicateExperimentCheckBox.setText("Replicate Experiment");
        DuplicateExperimentCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DuplicateExperimentCheckBoxActionPerformed(evt);
            }
        });

        TimesLabel.setText("times");

        AlgorithmLabel.setText("Algorithm:");

        AlgorithmCombobox.setModel(new javax.swing.DefaultComboBoxModel(ALGORITHMS)
        );
        AlgorithmCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlgorithmComboboxActionPerformed(evt);
            }
        });

        InputFileTextField.setEditable(false);

        org.jdesktop.layout.GroupLayout NewExperimentPanelLayout = new org.jdesktop.layout.GroupLayout(NewExperimentPanel);
        NewExperimentPanel.setLayout(NewExperimentPanelLayout);
        NewExperimentPanelLayout.setHorizontalGroup(
            NewExperimentPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, NewExperimentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(DuplicateExperimentCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(DuplicateSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 85, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(TimesLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 162, Short.MAX_VALUE)
                .add(RequiredMatrixLabel)
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, NewExperimentPanelLayout.createSequentialGroup()
                .add(NewExperimentPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(NewExperimentPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(ExperimentNameLabel))
                    .add(NewExperimentPanelLayout.createSequentialGroup()
                        .add(68, 68, 68)
                        .add(AlgorithmLabel)))
                .add(12, 12, 12)
                .add(NewExperimentPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, AlgorithmCombobox, 0, 263, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, ErrorInputFileLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, InputFileTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                    .add(ExperimentNameFormattedTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(NewExperimentPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(UploadInputFileButton)
                    .add(MaxInputChatLabel))
                .add(24, 24, 24))
        );
        NewExperimentPanelLayout.setVerticalGroup(
            NewExperimentPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(NewExperimentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(NewExperimentPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(ExperimentNameLabel)
                    .add(ExperimentNameFormattedTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(MaxInputChatLabel))
                .add(18, 18, 18)
                .add(NewExperimentPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(UploadInputFileButton)
                    .add(InputFileTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(ErrorInputFileLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(NewExperimentPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(AlgorithmCombobox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(AlgorithmLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 240, Short.MAX_VALUE)
                .add(NewExperimentPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(RequiredMatrixLabel)
                    .add(DuplicateExperimentCheckBox)
                    .add(DuplicateSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(TimesLabel))
                .addContainerGap())
        );

        DuplicateSpinner.setVisible(false);
        TimesLabel.setVisible(false);

        OKButton.setText("OK");
        OKButton.setEnabled(false);
        OKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKButtonActionPerformed(evt);
            }
        });

        CancelButton.setText("Cancel");
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(388, Short.MAX_VALUE)
                .add(CancelButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(OKButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 53, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(NewExperimentPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(NewExperimentPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 430, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(CancelButton)
                    .add(OKButton))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ExperimentNameFormattedTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ExperimentNameFormattedTextFieldFocusLost
        // serve per evitare l'inserimento di separatori di file nel nome dell'esperimento
        String name = ExperimentNameFormattedTextField.getText();

        if ( name.matches("[\\s]+") || name.equals("") ) {
            ExperimentNameFormattedTextField.setText("experiment");
        } else if ( name.length() >= 32 ) {
            viewErrorDialog("too long");
            ExperimentNameFormattedTextField.setText("experiment");
        } else if( name.contains(Infos.FILE_SEPARATOR) ) {
            viewErrorDialog("contains "+Infos.FILE_SEPARATOR);
            ExperimentNameFormattedTextField.setText("experiment");
        } else if ( name.contains(".") ) {
            viewErrorDialog("contains \".\"");
            ExperimentNameFormattedTextField.setText("experiment");
        } else
            NAME = name;
}//GEN-LAST:event_ExperimentNameFormattedTextFieldFocusLost

    private void UploadInputFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UploadInputFileButtonActionPerformed

        // Se è selezionata l'importazione da file
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(CONFIG.loading_path));
        int returnVal = fc.showOpenDialog(this);

        // Se è tutto ok, carico il riferimento al file e lo salvo
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            INPUT_FILE = fc.getSelectedFile();

            try 
            {
                ALGORITHM.setInput(INPUT_FILE);
                
                InputFileTextField.setText(INPUT_FILE.getAbsolutePath());
                ErrorInputFileLabel.setForeground(Color.green);
                ErrorInputFileLabel.setText(okMsg);
                ErrorInputFileLabel.setVisible(true);
                CORRECT_INPUT = true;
                OKButton.setEnabled(true);
            }
            catch (Throwable ex)
            {
                Logger.getLogger(NewGenericExperimentDialog.class.getName()).log(Level.SEVERE, null, ex);
                InputFileTextField.setText("");
                ErrorInputFileLabel.setForeground(Color.red);
                ErrorInputFileLabel.setText(errMsg);
                ErrorInputFileLabel.setVisible(true);
                CORRECT_INPUT = false;
            }
        }
}//GEN-LAST:event_UploadInputFileButtonActionPerformed

    private void DuplicateExperimentCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DuplicateExperimentCheckBoxActionPerformed
        if(DuplicateExperimentCheckBox.isSelected()) {
            DuplicateSpinner.setVisible(true);
            TimesLabel.setVisible(true);
        } else {
            DuplicateSpinner.setVisible(false);
            TimesLabel.setVisible(false);
        }
}//GEN-LAST:event_DuplicateExperimentCheckBoxActionPerformed

    private void OKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKButtonActionPerformed
        try
        {
            EXPERIMENT = new GenericExperiment(CONFIG, NAME);
            EXPERIMENT.setInput(INPUT_FILE);
            EXPERIMENT.setAlgorithm(ALGORITHM);
        } 
        catch (IOException ex)
        {
            Logger.getLogger(NewGenericExperimentDialog.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, getClass().getName()+": "+ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        doClose(RET_OK);
}//GEN-LAST:event_OKButtonActionPerformed

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonActionPerformed
        doClose(RET_CANCEL);
}//GEN-LAST:event_CancelButtonActionPerformed

    private void AlgorithmComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AlgorithmComboboxActionPerformed
        if(CORRECT_INPUT)
        {
            INPUT_FILE = null;
            EXPERIMENT = null;

            InputFileTextField.setText("");
            ErrorInputFileLabel.setForeground(Color.red);
            ErrorInputFileLabel.setText(stdMsg);
            ErrorInputFileLabel.setVisible(true);
            OKButton.setEnabled(false);

            CORRECT_INPUT = false;
        }

        ALGORITHM = getSelectedAlgorithm();
    }//GEN-LAST:event_AlgorithmComboboxActionPerformed

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                NewGenericExperimentDialog dialog = new NewGenericExperimentDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox AlgorithmCombobox;
    private javax.swing.JLabel AlgorithmLabel;
    private javax.swing.JButton CancelButton;
    private javax.swing.JCheckBox DuplicateExperimentCheckBox;
    private javax.swing.JSpinner DuplicateSpinner;
    private javax.swing.JLabel ErrorInputFileLabel;
    private javax.swing.JFormattedTextField ExperimentNameFormattedTextField;
    private javax.swing.JLabel ExperimentNameLabel;
    private javax.swing.JTextField InputFileTextField;
    private javax.swing.JLabel MaxInputChatLabel;
    private javax.swing.JPanel NewExperimentPanel;
    private javax.swing.JButton OKButton;
    private javax.swing.JLabel RequiredMatrixLabel;
    private javax.swing.JLabel TimesLabel;
    private javax.swing.JButton UploadInputFileButton;
    // End of variables declaration//GEN-END:variables

    private int returnStatus = RET_CANCEL;
    public int getReturnStatus()
    {
        return this.returnStatus;
    }
}
