package ui;

import algorithm.phylip.Phylip;
import experiment.Experiment;
import informations.Infos;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import utility.KillPid;


public class JProgress extends javax.swing.JDialog {
    private Experiment exp;
    private boolean killed = false;
    
    /** Creates new form JProgress */
    public JProgress(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        progressBar.setIndeterminate(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressBar = new javax.swing.JProgressBar();
        cancelButton = new javax.swing.JButton();
        infoTxt = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Executing...");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(progressBar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                    .add(infoTxt)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, cancelButton))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(infoTxt, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 14, Short.MAX_VALUE)
                .add(4, 4, 4)
                .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cancelButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void setExperiment(Experiment exp) {
        this.exp = exp;
    }

    public void setExecutingText(String something) {
        infoTxt.setText(something);
    }

    public void start() {
        task.start();
        
        while(!task.get().equals(true)) {}
    }

    /* Process to execute */
    private SwingWorker task = new SwingWorker() {
        @Override
        public Object construct() {
            try {
                exp.exec();
            }
            catch (Throwable ex) {
                if(!killed) {
                    Logger.getLogger(JProgress.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(
                                null,
                                this.getClass().getName()+": "+ex.toString(),
                                "Error",
                                JOptionPane.ERROR_MESSAGE);
                }
            }

            return true;
        }

        @Override
        public void finished() {
            setVisible(false);
        }
    };

    private void cancel() {
        setVisible(true);
        infoTxt.setText("Cancelling operation...");
        task.interrupt();
        killed = true;

        /* Needed to kill the phylip process */
        if(exp.getAlgorithm() instanceof Phylip) {
            Phylip proc = (Phylip)exp.getAlgorithm();
            String pid = proc.getPid();

            if(pid != null) {
                if (Infos.OS_NAME.indexOf( "win" ) >= 0) {
                    try {
                        (new KillPid(pid, true)).kill();
                    } catch (Exception ex) {
                        Logger.getLogger(JProgress.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(
                                    null,
                                    this.getClass().getName()+": "+ex.toString(),
                                    "Error",
                                    JOptionPane.ERROR_MESSAGE);
                    }
                }
                else {
                    try {
                        (new KillPid(pid, false)).kill();
                    } catch (Exception ex) {
                        Logger.getLogger(JProgress.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(
                                    null,
                                    this.getClass().getName()+": "+ex.toString(),
                                    "Error",
                                    JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }
    }

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        cancel();
}//GEN-LAST:event_cancelButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        int returnValue = JOptionPane.showConfirmDialog(
                    null,
                    "You are trying to quit experiment before it's done.\n"
                  + "Do you want to quit it ?",
                    "Warning",
                    JOptionPane.WARNING_MESSAGE);
        
        if(returnValue == JOptionPane.OK_OPTION) {
            cancel();
        }
        else {
            setVisible(true);
        }
    }//GEN-LAST:event_formWindowClosed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JProgress dialog = new JProgress(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel infoTxt;
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables

}
